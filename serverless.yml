# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: pizza-nodejs
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-pseudo-parameters

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource:
            - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/ORDER
        - Effect: 'Allow'
          Action:
            - kinesis:PutRecord
          Resource:
            - arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-stream
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource:
            - "*"
          Condition:
            StringEquals:
              ses:FromAddress:
                - ronyk.nguyen@gmail.com
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:deliveryServiceQueue
# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  orderPlace:
    handler: handler.orderPlace
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
     - httpApi:
         path: /orders
         method: POST
    environment:
      orderTableName: 'ORDER'
      orderTableStreamName: 'order-stream'
  orderFulfillment:
    handler: handler.orderFulfillment
    events:
     - httpApi:
         path: /orders/{id}/fullfillment
         method: PATCH
    environment:
      orderTableName: 'ORDER'
      orderTableStreamName: 'order-stream'
  notifyParties:
    handler: handler.notifyParties
    events:
      - stream:
          arn: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-stream
    environment:
      region: ${AWS:Region}
      cakeProducerEmail: ronyk.nguyen@gmail.com
      orderingSystemEmail: ronyk.nguyen@gmail.com
      deliveryCompanyQueue: 
        Ref: deliveryServiceQueue
      orderTableName: 'ORDER'
  notifyDeliveryCompany:
    handler: handler.notifyDeliveryCompany
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - deliveryServiceQueue
              - Arn
          batchSize: 1
  orderDelivered:
    handler: handler.orderDelivered
    events:
     - httpApi:
         path: /orders/{id}/delivered
         method: PUT
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    orderTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ORDER
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
    orderKinesisDataStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: order-stream
        ShardCount: 1
    deliveryServiceQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: deliveryServiceQueue
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
